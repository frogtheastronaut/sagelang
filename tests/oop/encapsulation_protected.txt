// Test protected access modifier
// Protected members can be accessed within the class and its subclasses

class Employee {
    protected salary;
    public name;
    
    function constructor(name, salary) {
        this.name = name;
        this.salary = salary;
    }
    
    protected function calculateBonus() {
        return this.salary * 0.1;
    }
    
    public function displayInfo() {
        print "Employee: " + this.name;
        print "Salary: " + this.salary;
    }
}

class Manager < Employee {
    function constructor(name, salary, department) {
        this.name = name;
        this.salary = salary;
        this.department = department;
    }
    
    public function displayInfo() {
        print "Manager: " + this.name;
        print "Department: " + this.department;
        print "Salary: " + this.salary;  // Can access protected field
        print "Bonus: " + this.calculateBonus();  // Can call protected method
    }
    
    public function giveRaise(amount) {
        this.salary = this.salary + amount;  // Can modify protected field
        print "Raise given: " + amount;
    }
}

let emp = new Employee("John", 50000);
emp.displayInfo();

print "---";

let mgr = new Manager("Sarah", 80000, "Engineering");
mgr.displayInfo();
mgr.giveRaise(10000);
mgr.displayInfo();

// These should fail - protected access from outside
// print emp.salary;  // Error: Cannot access protected field from outside
// emp.calculateBonus();  // Error: Cannot access protected method from outside
